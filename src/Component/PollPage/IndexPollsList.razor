@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFilePollService PollService
@inject JsonFileUserService UserService

@*Comment out Sections : Delete Before Submission
    <div class="card text-white bg-dark mb-3" style="max-width: 25rem;">
      <div class="row poll-row">*@

@PrintMessage

<div>
    <div class=" row">
        <div class="col">
            <input type ="text" @onchange="(e) => UpdateFilterText(e.Value.ToString())" value="@FilterDataString"/>
        </div>
    </div>
</div>

<div class="container">
    <div class="row">
        @{
            var pollList = PollService.GetPolls().ToList().OrderBy(x => x.PollID);
            @* render all polls *@
            foreach (PollModel poll in pollList)
            {
                int opinionVoteCount = PollService.GetTotalVotes(poll);
                
                <div class="col-sm-6">
                    <div class="card text-white bg-dark mb-3" style="width: 30rem;">
                        <div class="card-body">
                            <h2 class="card-title"> @poll.Title</h2> <hr />
                            <p class="card-subtitle">  @poll.Description </p>
                            <div class="card-body">
                                @* render each opinion*@
                                @foreach (OpinionItem item in poll.OpinionItems)
                                {
                                    @* handle selection of each opinion *@
                                    <div class="col-auto">
                                        <input @onchange="(e) => SelectOpinionItem(item.OpinionName, poll.PollID)"
                                               class="form-check-input" type="radio" name="itemButtons" id="@item.OpinionName" value="@item.OpinionName">
                                        <label>@item.OpinionName</label>
                                    </div>

                                    @* show percentages of each opinion*@
                                    <div class="col-auto">
                                        @{
                                            double percentage = 0;
                                            if (opinionVoteCount != 0)
                                            {
                                                percentage = (item.NumCounts * 100) / opinionVoteCount;
                                            }

                                            <div class="progress">
                                                <div class="progress-bar bg-info" role="progressbar" style="width: @percentage%"
                                                     aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">@percentage%</div>
                                                </div>
                                                <label>Votes : @item.NumCounts</label>
                                        }
                                    </div>
                                }
                            </div>

                            @* show poller's info if the poller exist in database'*@
                            @{
                                var getAuthor = UserService.GetUser(poll.UserID);

                                // if Author No Longer Exists(Account Was Deleted), does not show author info
                                if (getAuthor != null)
                                {
                                    <div class="col-auto">
                                        <label>Poller Name: @getAuthor.Username</label>
                                    </div>

                                    <div class="col-auto">
                                        <label>Poller Location: @getAuthor.Location</label>
                                    </div>
                                }
                            }
                            <hr />


                            @*Submit Vote for a particular opinion*@
                            <button @onclick="(e => SubmitVote(PollID, Opinion))" name="voteBtn" id="voteBtn" class="btn btn-outline-success">Vote</button>

                            @*Select the Poll and Pops up poll edit modal*@
                            <button @onclick="(e => SelectPoll(poll.PollID, poll.Title))"
                                    name="AddOpinionsBtn" id="AddOpinionsBtn" type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModal">
                                Add Opinions
                            </button>
                            <br /><br />

                            @*Show visualization of a poll's opinion distribution*@
                            <a class="btn btn-outline-success" href="/PollsPages/ReadPollPage?id=@poll.PollID">See Analysis</a>
                        </div>
                    </div>
                </div>


            }

            <!-- Modal -->
            <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="exampleModalLabel">@PollTitle</h5>
                            <button type="button" id="sTableBtn" name="sTableBtn" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>

                        <div class="modal-body">
                            <label>New Opinion One</label>
                            <input id="OpinionOneInput" value="@OpinionOne" @onchange="(e => OpinionOne = e.Value.ToString())" /> <br />

                            <label>New Opinion Two</label>
                            <input id="OpinonTwoInput" value="@OpinionTwo" @onchange="(e => OpinionTwo = e.Value.ToString())" />

                        </div>

                        <div class="modal-footer">
                            <button type="button" id="CloseBtn" name="CloseBtn" class="btn btn-secondary" data-dismiss="modal">Close</button>
                            <button type="button" @onclick="(e => SubmitAddOpinion(PollID,OpinionOne, OpinionTwo))" id="submitOpinionsBtn"
                                    data-dismiss="modal" name="submitOpinionsBtn" class="btn btn-primary">
                                Add Opinions
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {

    /// Poll ID Attribute
    int PollID = -99;

    //opinion attribute
    string Opinion = "";

    //new opinion one
    string OpinionOne = "";

    //new opinion two
    string OpinionTwo = "";

    //title of poll
    string PollTitle = "";

    /// <summary>
    /// method to capture current poll that is being examined by user
    /// </summary>
    /// <param name="id"></param>
    /// <param name="title"></param>
    void SelectPoll(int id, string title)
    {
        //poll id
        PollID = id;

        //poll title
        PollTitle = title;
    }

    /// <summary>
    /// Select PollID and opinion attributes
    /// </summary>
    /// <param name="inputValue"></param>
    /// <param name="inputID"></param>
    void SelectOpinionItem(string inputValue, int inputID)
    {
        // Update opinion
        Opinion = inputValue;

        // Update PollID
        PollID = inputID;
    }

    /// <summary>
    /// Submit Vote to be Incremented
    /// </summary>
    /// <param name="pollidInput"></param>
    /// <param name="opinionInput"></param>
    /// <returns></returns>
    bool SubmitVote(int pollidInput, string opinionInput)
    {
        // Validate Poll ID Input
        if (pollidInput < 0)
        {
            return false;
        }

        // Send it to Poll Services and Return the Result
        return PollService.UpdateOpinionVote(pollidInput, opinionInput);
    }

    // Prompt user if Add Poll fails
    string PrintMessage = "";

    /// <summary>
    /// Submit New Opinions To be Added
    /// </summary>
    /// <param name="pollID"></param>
    /// <param name="opinionItemOne"></param>
    /// <param name="opinionItemTwo"></param>
    /// <returns></returns>
    void SubmitAddOpinion(int pollID, string opinionItemOne, string opinionItemTwo)
    {

        //Send to Poll Services and return result
        bool result = PollService.AddOpinion(pollID, opinionItemOne, opinionItemTwo);

        // Reset Strings
        OpinionOne = String.Empty; //Reset opinion one

        OpinionTwo = String.Empty; //reset opinion two

        if (result == false)
        {
            PrintMessage = "Error With Addition of Opinions Try Again";
            return;
        }
        result = "";
    }

    // Data to Filter with 
    string FilterDataString = "";

    // Filter flag
    bool FilterData = false;

    /// <summary>
    /// Update Filter Data String
    /// </summary>
    /// <param name="text"></param>
    void UpdateFilterData(string text)
    {
        FilterDataString = text;
    }

    /// <summary>
    /// Set the filter flag to true
    /// </summary>
    void EnableFilterData()
    {
        FilterData = true;
    }

    /// <summary>
    /// Set the filter flag to false
    /// </summary>
    void clearFilterData()
    {
        FilterData = false;
    }
}