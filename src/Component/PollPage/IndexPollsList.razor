@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services 
@inject JsonFilePollService PollService
@inject JsonFileUserService UserService



<div class="container">
    <div class="row">
        @{
            var pollList = PollService.GetPolls().ToList().OrderBy(x => x.PollID);
            foreach (PollModel poll in pollList)
            {
                int opinionVoteCount = PollService.GetTotalVotes(poll);

                <div class="col-4">
                    <div class="card text-white bg-dark mb-3">
                        <div class="card-body">
                            <h2 class="card-title"> @poll.Title</h2>
                            <hr />
                            <p class="card-subtitle">  @poll.Description </p>
                            <div class="card-body">

                                @foreach (OpinionItem items in poll.OpinionItems)
                                {
                                    <div class="col-auto">
                                        <input @onchange="(e) => UpdateOpinionInput(items.OpinionName, poll.PollID)" class="form-check-input" type="radio" name="itemButtons" id="@items.OpinionName" value="@items.OpinionName">
                                        <label>@items.OpinionName</label>
                                    </div>
                                    <div class="col-auto">
                                        @{
                                            double percentage = 0;
                                            if (opinionVoteCount != 0)
                                            {
                                                percentage = (items.NumCounts * 100) / opinionVoteCount;
                                            }

                                            <div class="progress">
                                                <div class="progress-bar bg-info" role="progressbar" style="width: @percentage%" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">@percentage%</div>
                                            </div>
                                            <label>Votes : @items.NumCounts</label>
                                        }
                                    </div>

                                            }

                            </div>

                            @{
                                var getAuthor = UserService.GetUser(poll.UserID);

                                // Author No Longer Exists: Account Was Deleted
                                if (getAuthor != null)
                                {
                                    <label>Author Name: @getAuthor.Username</label>
                                    <label>Author Location: @getAuthor.Location</label>
                                }
                            }
                            <hr />
                            <button @onclick="(e => SubmitVote(PollID, Opinion))" name="voteBtn" id="voteBtn" class="btn btn-outline-success">Submit Vote</button>

                            <button @onclick="(e => CapturedPoll(poll.PollID, poll.Title))" name="AddOpinionsBtn" id="AddOpinionsBtn" type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModal">
                                Add Opinions
                            </button>

                            <br /><br />

                            <a class="btn btn-outline-success" href="/PollsPages/ReadPollPage?id=@poll.PollID">View Graphics</a>

                        </div>
                    </div>
                </div>


                                }

            <!-- Modal -->
            <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="exampleModalLabel">@PollTitle</h5>
                            <button type="button" id="sTableBtn" name="sTableBtn" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">

                            <label>Opinion One </label>

                            <input value="@OpinionOne" id="opinionOneInput" @onchange="@((ChangeEventArgs __e) => OpinionOne = __e.Value.ToString())" />

                            <br />

                            <label>Opinion Two</label>

                            <input value="@OpinionTwo" id="opinionTwoInput" @onchange="@((ChangeEventArgs __e) => OpinionTwo = __e.Value.ToString())" />

                        </div>
                        <div class="modal-footer">
                            <button type="button" id="CloseBtn" name="CloseBtn" class="btn btn-secondary" data-dismiss="modal">Close</button>
                            <button type="button" @onclick="(e => SubmitAddOpinion(PollID,OpinionOne, OpinionTwo))" id="submitOpinionsBtn" data-dismiss="modal" name="submitOpinionsBtn" class="btn btn-primary">Add Opinions</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {

    /// Poll ID Attribute
    int PollID = -99;

    //opinion attribute
    string Opinion = "";

    //new opinion one 
    string OpinionOne = "";

    //new opinion two 
    string OpinionTwo = "";

    //title of poll
    string PollTitle = "";

    /// <summary>
    /// method to capture current poll that is being examined by user
    /// </summary>
    /// <param name="id"></param>
    /// <param name="title"></param>
    void CapturedPoll(int id, string title)
    {
        //poll id
        PollID = id;

        //poll title
        PollTitle = title;
    }

    /// <summary>
    /// Update PollID and opinion attributes
    /// </summary>
    /// <param name="inputValue"></param>
    /// <param name="inputID"></param>
    void UpdateOpinionInput(string inputValue, int inputID)
    {
        // Update opinion
        Opinion = inputValue;

        // Update PollID
        PollID = inputID;
    }

    /// <summary>
    /// Submit Vote to be Incremented
    /// </summary>
    /// <param name="pollidInput"></param>
    /// <param name="opinionInput"></param>
    /// <returns></returns>
    bool SubmitVote(int pollidInput, string opinionInput)
    {
        // Validate Poll ID Input
        if (pollidInput < 0)
        {
            return false;
        }

        // Send it to Poll Services and Return the Result
        return PollService.UpdateOpinionVote(pollidInput, opinionInput);
    }

    bool SubmitAddOpinion(int pollID, string opinionItemOne, string opinionItemTwo)
    {
        //validate poll id input
        if (pollID < 0)
        {
            return false;
        }

        //Send to Poll Services and return result
        bool result = PollService.addOpinion(pollID, opinionItemOne, opinionItemTwo);

        //check that result is finished 
        if (result == true)
        {
            //Reset opinions 
            OpinionOne = String.Empty;

            //reset opinion two 
            OpinionTwo = String.Empty;
        }

        return result;
    }
}