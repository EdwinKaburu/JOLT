@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFilePollService PollService
@inject JsonFileUserService UserService


<div class="container">
    <div class="row">
        @{
            var pollList = PollService.GetPolls().ToList();
            foreach (PollModel poll in pollList)
            {

                <div class="col-4">
                    <div class="card text-white bg-dark mb-3">
                        <div class="card-body">
                            <h2 class="card-title"> @poll.Title</h2>
                            <hr />
                            <p class="card-subtitle">  @poll.Description </p>
                            <div class="card-body">
                                @{
                                    // variable that keeps count of the total votes
                                    var totalVotes = 0;

                                    // variable that keeps track of opinion 1 ratio
                                    int opinion1Ratio = poll.OpinionItems.ElementAt(0).NumCounts;

                                    // string that keeps track of opinion 1 percentage
                                    string opinion1Percentage = "";

                                    // int that keeps track of opinion 2 ratio
                                    int opinion2Ratio = poll.OpinionItems.ElementAt(1).NumCounts;

                                    // string that keeps track of opinion 2 percentage
                                    string opinion2Percentage ="";

                                    //bool to show progress bars
                                    bool showProgress = false;

                                    //current list of counts
                                    List<int> counts = new List<int>();

                                    //list of Opinion Percentages
                                    List<string> opinionPercentages = new List<string>();


                                }

                                @foreach (OpinionItem item in poll.OpinionItems.ToList())
                                {
                                    //add current vote coun to "counts"
                                    counts.Add(item.NumCounts);

                                    // sum the totalCount
                                    totalVotes = totalVotes + item.NumCounts;

                                }

                                @{
                                    //Make sure that totalVotes is not 0
                                    @if (totalVotes == 0)
                                    {
                                        //hide progress bar
                                        showProgress = true;

                                        //update to non zero number to avoid division by zero
                                        totalVotes = 1;

                                    }


                                    //Opinion1 percentage
                                    opinion1Ratio = (counts[0] / totalVotes) * 100;

                                    //convert ratio into usable string
                                    opinion1Percentage = opinion1Ratio.ToString() + "%";

                                    //Opinion2 percentage
                                    opinion2Ratio = (counts[1] / totalVotes) * 100;

                                    //convert ratio into usable string
                                    opinion2Percentage = opinion2Ratio.ToString() + "%";
                                    }


                                  

                                <!--First Opinion-->
                                <div class="col-auto">

                                    <input @onchange="(e) => UpdateOpinionInput(poll.OpinionItems.ElementAt(0).OpinionName, poll.PollID)" class="form-check-input" type="radio" name="gridRadios" id="gridRadios2" value="@poll.OpinionItems.ElementAt(0).OpinionName">

                                    <label>@poll.OpinionItems.ElementAt(0).OpinionName</label>

                                </div>
                                <div class="progress" hidden="@showProgress">
                                    <div class="progress-bar bg-info" role="progressbar" style="width: @opinionPercentages[0];" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">@opinionPercentages[0]</div>
                                </div>
                                <div class="col-auto">
                                    <label>Votes: @poll.OpinionItems.ElementAt(0).NumCounts</label>
                                </div>
                                <!--Second Opinion-->
                                <div class="col-auto">

                                    <input @onchange="(e) => UpdateOpinionInput(poll.OpinionItems.ElementAt(1).OpinionName, poll.PollID)" class="form-check-input" type="radio" name="gridRadios" id="gridRadios2" value="@poll.OpinionItems.ElementAt(1).OpinionName">

                                    <label>@poll.OpinionItems.ElementAt(1).OpinionName</label>

                                </div>
                                <div class="progress" hidden="@showProgress">
                                    <div class="progress-bar bg-info" role="progressbar" style="width: @opinion1Ratio%;" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">@opinion2Ratio%</div>
                                </div>
                                <div class="col-auto">
                                    <label>Votes: @poll.OpinionItems.ElementAt(1).NumCounts</label>
                                </div>

                            </div>

                            @{
                                var getAuthor = UserService.GetUser(poll.UserID);

                                // Author No Longer Exists: Account Was Deleted
                                if (getAuthor != null)
                                {
                                    <label>Author Name: @getAuthor.Username</label>
                                    <label>Author Location: @getAuthor.Location</label>
                                }
                            }
                            <hr />
                            <button @onclick="(e => SubmitVote(PollID, Opinion))" name="voteBtn" id="voteBtn" class="btn btn-outline-success">Submit Vote</button>
                            <a class="btn btn-outline-primary">Edit Poll</a>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>


@code {

    /// <summary>
    /// Poll ID Attribute
    /// </summary>
    int PollID = -99;

    /// <summary>
    /// Opinion Attribute
    /// </summary>
    string Opinion = "";

    /// <summary>
    /// Update PollID and opinion attributes
    /// </summary>
    /// <param name="inputValue"></param>
    /// <param name="inputID"></param>
    void UpdateOpinionInput(string inputValue, int inputID)
    {
        // Update opinion 
        Opinion = inputValue;
        // Update PollID
        PollID = inputID;
    }

    /// <summary>
    /// Submit Vote to be Incremented 
    /// </summary>
    /// <param name="pollidInput"></param>
    /// <param name="opinionInput"></param>
    /// <returns></returns>
    bool SubmitVote(int pollidInput, string opinionInput)
    {
        // Validate Poll ID Input 
        if (pollidInput < 0)
        {
            return false;
        }

        // Send it to Poll Services and Return the Result
        return PollService.UpdateOpinionVote(pollidInput, opinionInput);
    }
}